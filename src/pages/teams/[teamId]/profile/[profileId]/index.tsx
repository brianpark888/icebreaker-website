"use client";
import {
  ArrowLeft,
  Mail,
  MapPin,
  Briefcase,
  Calendar,
  Trophy,
  Gamepad2,
  Activity,
  Users,
} from "lucide-react";
import Button from "@/components/ui/Button";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { set } from "zod";
import { useCallback } from "react";
import Joyride, { Step } from "react-joyride";
import dynamic from "next/dynamic";
import ScoreAnimation from "@/components/ScoreAnimation";
import LeadershipPointsNotification from "@/components/LeadershipPointsNotification";

const ReactConfetti = dynamic(() => import("react-confetti"), {
  ssr: false,
});

export default function ProfilePage() {
  const router = useRouter();
  const { teamId, profileId } = router.query;
  const [myData, setMyData] = useState<any>(null);
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [selectedStatement, setSelectedStatement] = useState<string | null>(
    null,
  );
  const [shuffledStatements, setShuffledStatements] = useState<
    { text: string; isLie: boolean }[]
  >([]);
  const [toastMessage, setToastMessage] = useState<string | null>(null);
  const [toastType, setToastType] = useState<"success" | "error" | null>(null);
  const [hasSubmitted, setHasSubmitted] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false); // state var for confetti
  const [windowSize, setWindowSize] = useState({
    // state var for window size for confetti dimensions
    width: typeof window !== "undefined" ? window.innerWidth : 0,
    height: typeof window !== "undefined" ? window.innerHeight : 0,
  });
  const [showScoreAnimation, setShowScoreAnimation] = useState(false);
  const [currentScore, setCurrentScore] = useState(0);
  const [showPointsNotification, setShowPointsNotification] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const fetchMe = async (teamId: string) => {
    const username = localStorage.getItem("username");
    const res = await fetch(`/api/user/${username}?teamId=${teamId}`);
    const { user } = await res.json();
    if (!res.ok) throw new Error("failed to fetch me");
    setMyData(user);
    return user;
  };

  const fetchProfile = async (profileId: string, teamId: string) => {
    const res = await fetch(`/api/user/${profileId}?teamId=${teamId}`);
    const { user } = await res.json();
    if (!res.ok) throw new Error("failed to fetch profile");
    setUser(user);
    return user;
  };

  const checkAlreadyAnswered = async (myId: string, profileId: string) => {
    const [id1, id2] = [myId, profileId].sort();
    const res = await fetch(
      `/api/team-members/check-truth-lie?myId=${id1}&profileId=${id2}`,
    );
    const data = await res.json();
    if (!res.ok) throw new Error("status check failed");

    if (data.exists) {
      setHasSubmitted(true);
      if (data.correct !== null) {
        setToastMessage(
          data.correct
            ? "You've already guessed correctly! 🎉"
            : "You've already guessed, and it was incorrect.",
        );
        setToastType(data.correct ? "success" : "error");
      }
    }
  };

  // Tutorial part 2

  const [stepIndex, setStepIndex] = useState(0);
  const [runTutorial, setRunTutorial] = useState(false);

  useEffect(() => {
    if (
      (myData && myData?.onboarding_stage === 1) ||
      myData?.onboarding_stage === 0
    ) {
      setRunTutorial(true);
    }
  }, [myData]);

  const steps: Step[] = [
    {
      target: "body",
      placement: "center",
      content:
        "Your 2 truths and a lie has been generated by AI using your bio and responses. Try to guess it!",
      disableBeacon: true,
    },
    {
      target: ".bio-answer",
      content:
        "Nice guess! Now you can see your bio and response to the prompts",
      locale: { next: "OK" },
    },
    {
      target: ".back-button",
      content: "Click back to go back to the team dashboard",
      locale: { next: "OK" },
    },
  ];
  const handleJoyrideCallback = (data: any) => {
    const { action, index, status, type } = data;

    if (status === "skipped" || status === "finished") {
      setRunTutorial(false);
      return;
    }

    // Handle step logic
    if (type === "step:before") {
      if (index === 1) {
        const el = document.querySelector(".success");
        if (!el) {
          // Wait until it's visible
          waitForSuccessElement();
          return;
        }
      }
    }

    if (type === "step:after") {
      setStepIndex(index + 1); // Always increment on after
    }

    if (type === "target:notFound") {
      setStepIndex(index + 1);
    }
  };

  const waitForSuccessElement = () => {
    const interval = setInterval(() => {
      const el = document.querySelector(".success");
      if (el) {
        clearInterval(interval);
        setStepIndex(1); // Resume to Step 2
      }
    }, 300);
  };

  /* ---------- master effect: run them in order ---------- */
  useEffect(() => {
    const safeTeamId =
      typeof teamId === "string"
        ? teamId
        : Array.isArray(teamId)
          ? teamId[0]
          : undefined; // undefined if missing

    const safeProfileId =
      typeof profileId === "string"
        ? profileId
        : Array.isArray(profileId)
          ? profileId[0]
          : undefined;

    if (!safeTeamId || !safeProfileId) return; // still guard for undefined

    const run = async () => {
      setLoading(true);
      try {
        const me = await fetchMe(safeTeamId);
        const prof = await fetchProfile(safeProfileId, safeTeamId);
        setCurrentScore(prof.leadership_score || 0);
        await checkAlreadyAnswered(me.id, prof.id);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    run();
  }, [teamId, profileId]);

  /* ---------- shuffle statements once profile is set ---------- */
  useEffect(() => {
    if (!user?.two_truths_and_lie) return;
    const { truth1, truth2, lie } = user.two_truths_and_lie;
    setShuffledStatements(
      [
        { text: truth1, isLie: false },
        { text: truth2, isLie: false },
        { text: lie, isLie: true },
      ].sort(() => Math.random() - 0.5),
    );
  }, [user]);

  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <p>Loading profile data...</p>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <h1 className="mb-4 text-2xl font-bold">User not found</h1>
          <Button onClick={() => router.push(`/teams/${teamId}`)}>
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Team
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-background">
      {/* React Joyride Component */}
      <Joyride
        steps={steps}
        run={runTutorial}
        stepIndex={stepIndex}
        callback={handleJoyrideCallback}
        showSkipButton
        continuous
        scrollToFirstStep
        styles={{
          options: {
            //primaryColor: "#6366f1", // customize to match your theme
            arrowColor: "#000000",
            backgroundColor: "#000000",
            overlayColor: "rgba(0, 0, 0, 0.5)",
            primaryColor: "#ffffff",
            textColor: "#ffffff",
            spotlightShadow: "0 0 0 2px rgba(255, 255, 255, 0.5)",
            zIndex: 1000,
          },
          buttonNext: {
            background: "linear-gradient(to right, #3b82f6, #8b5cf6)", // blue-500 to violet-500
            color: "white",
            border: "none",
            borderRadius: "0.375rem", // Tailwind: rounded-md
            padding: "0.5rem 1rem",
            fontWeight: "500",
            boxShadow: "0 2px 6px rgba(0, 0, 0, 0.2)",
            transition: "opacity 0.3s ease",
          },
          buttonBack: {
            color: "#ccc",
          },
          buttonSkip: {
            color: "#ccc",
          },
        }}
        locale={{
          last: "OK",
        }}
      />
      <main className="flex-1 overflow-auto">
        <div className="p-8">
          <div className="grid gap-6">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.push(`/teams/${teamId}`)}
                className="flex items-center justify-center rounded-lg p-1 transition-colors duration-200 ease-in-out hover:bg-muted/20"
              >
                <ArrowLeft className="back-button h-4 w-4" />
              </button>
              <h1 className="text-gradient text-3xl font-bold">
                {user.username}'s Profile
              </h1>
            </div>

            {/* Profile Header */}
            <div className="rounded-2xl border border-muted/20 bg-gradient-to-b from-muted/50 to-muted/30 p-6 backdrop-blur-sm">
              <div className="flex flex-col items-center gap-6 md:flex-row">
                <Image
                  src={
                    user.imgUrl ||
                    "/placeholder.svg?height=120&width=120&query=profile"
                  }
                  alt={user.username}
                  width={120}
                  height={120}
                  className="rounded-full bg-muted"
                />
                <div className="flex-1 space-y-2 text-center md:text-left">
                  <h2 className="text-2xl font-bold">{user.username}</h2>
                  <div className="flex flex-wrap justify-center gap-3 md:justify-start">
                    {user.email && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Mail className="h-4 w-4" />
                        <span>{user.email}</span>
                      </div>
                    )}
                    {user.location && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <MapPin className="h-4 w-4" />
                        <span>{user.location}</span>
                      </div>
                    )}
                    {user.company && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Briefcase className="h-4 w-4" />
                        <span>{user.company}</span>
                      </div>
                    )}
                    {user.joined_date && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Calendar className="h-4 w-4" />
                        <span>
                          Joined{" "}
                          {new Date(user.joined_date).toLocaleDateString()}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="rounded-xl bg-gradient-to-r from-blue-500 to-violet-500 p-3">
                    <Trophy className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">
                      Leadership Score
                    </p>
                    <div className="flex items-center justify-center gap-2">
                      <div className="text-2xl font-bold">{currentScore}</div>
                      <div className="relative">
                        <ScoreAnimation isVisible={showScoreAnimation} />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {user.two_truths_and_lie && (
              <div className="rounded-2xl border border-muted/20 bg-gradient-to-b from-muted/50 to-muted/30 p-6 backdrop-blur-sm">
                <h2 className="mb-4 text-xl font-semibold">
                  Two Truths and a Lie
                </h2>
                <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                  {shuffledStatements.map((statement, index) => (
                    <div
                      key={index}
                      onClick={() => {
                        if (!hasSubmitted) setSelectedStatement(statement.text);
                      }}
                      className={`cursor-pointer rounded-xl border p-4 transition ${
                        selectedStatement === statement.text
                          ? "border-blue-500 dark:bg-blue-900/20"
                          : "border-muted bg-muted/30"
                      } ${hasSubmitted ? "pointer-events-none opacity-50" : "hover:border-blue-300"}`}
                    >
                      <p className="text-muted-foreground">{statement.text}</p>
                    </div>
                  ))}
                </div>
                {!hasSubmitted && (
                  <div className="mt-4 text-center">
                    <Button
                      disabled={!selectedStatement || hasSubmitted}
                      onClick={async () => {
                        const chosen = shuffledStatements.find(
                          (s) => s.text === selectedStatement,
                        );
                        const isCorrect = chosen && chosen.isLie;
                        const isOwnProfile = myData.id === user.id;

                        const body = {
                          myId: myData.id,
                          profileId: user.id,
                          correct: isCorrect,
                        };
                        console.log(body);

                        try {
                          const res = await fetch(
                            "/api/team-members/submit-truth-lie",
                            {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify(body),
                            },
                          );

                          if (res.ok) {
                            setToastMessage(
                              isCorrect
                                ? "🎉 Correct! That was the lie."
                                : "❌ You chose a truth!",
                            );
                            setToastType(isCorrect ? "success" : "error");
                            setHasSubmitted(true);

                            // show confetti only after API confirms success
                            if (isCorrect) {
                              setShowConfetti(true);
                              setTimeout(() => setShowConfetti(false), 5000);

                              // if it's their own profile and they guessed correctly, show score animation
                              if (isOwnProfile) {
                                setShowScoreAnimation(true);
                                setCurrentScore((prev: number) => prev + 15);
                                setTimeout(
                                  () => setShowScoreAnimation(false),
                                  1500,
                                );
                              } else {
                                // show +15 points notif for guessing another member's lie correctly
                                setShowPointsNotification(true);
                                setTimeout(
                                  () => setShowPointsNotification(false),
                                  3000,
                                );
                              }
                            }
                          } else {
                            setToastMessage(
                              "Something went wrong submitting your answer.",
                            );
                            setToastType("error");
                          }
                        } catch (error) {
                          console.error(error);
                          setToastMessage("An unexpected error occurred.");
                          setToastType("error");
                        }
                      }}
                    >
                      Submit Guess
                    </Button>
                  </div>
                )}

                {toastMessage && (
                  <div
                    className={`mt-4 rounded-lg px-4 py-3 text-sm font-medium correct${
                      toastType === "success"
                        ? "bg-green-100 text-green-800 dark:bg-green-900/20"
                        : "bg-red-100 text-red-800 dark:bg-red-900/20"
                    }`}
                  >
                    {toastMessage}
                  </div>
                )}
              </div>
            )}

            {/* confetti firework animation */}
            {showConfetti && (
              <ReactConfetti
                width={windowSize.width}
                height={windowSize.height}
                recycle={false}
                numberOfPieces={200}
                gravity={0.5}
                initialVelocityY={30}
                initialVelocityX={15}
                confettiSource={{
                  x: windowSize.width / 2,
                  y: windowSize.height / 2,
                  w: 0,
                  h: 0,
                }}
                colors={["#FFD700", "#FFA500", "#FF69B4", "#00CED1", "#9370DB"]}
                tweenDuration={100}
                friction={0.99}
              />
            )}

            {/* Bio Section */}
            {hasSubmitted && (
              <div className="bio-answer rounded-2xl border border-muted/20 bg-gradient-to-b from-muted/50 to-muted/30 p-6 backdrop-blur-sm">
                <h2 className="mb-4 text-xl font-semibold">Bio</h2>
                <div className="rounded-xl bg-muted/30 p-5">
                  <p className="text-muted-foreground">{user.bio}</p>
                </div>
              </div>
            )}

            {hasSubmitted &&
              (user.promptResponse?.q ? (
                <div className="rounded-2xl border border-muted/20 bg-gradient-to-b from-muted/50 to-muted/30 p-6 backdrop-blur-sm">
                  <h2 className="mb-4 text-xl font-semibold">
                    {user.promptResponse.q}
                  </h2>
                  <div className="rounded-xl bg-muted/30 p-5">
                    <p className="text-muted-foreground">
                      {user.promptResponse.a}
                    </p>
                  </div>
                </div>
              ) : (
                <div className="rounded-2xl border border-muted/20 bg-gradient-to-b from-muted/50 to-muted/30 p-6 backdrop-blur-sm">
                  <h2 className="mb-4 text-xl font-semibold">
                    No Prompt Response Found
                  </h2>
                  <div className="rounded-xl bg-muted/30 p-5">
                    <p className="text-muted-foreground">
                      {user.username} has not provided a prompt response yet.
                    </p>
                  </div>
                </div>
              ))}
          </div>
        </div>
      </main>
      <LeadershipPointsNotification
        isVisible={showPointsNotification}
        points={15}
      />
    </div>
  );
}
